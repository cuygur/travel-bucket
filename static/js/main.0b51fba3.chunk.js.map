{"version":3,"sources":["firebaseConfig.js","Components/AddForm.js","Components/HomePageHeader/index.js","Components/Home/index.js","Components/NavbarPage/index.js","Components/About/index.js","Components/Contact/index.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","AddForm","board","React","useState","isShown","setIsShown","itemName","setItemName","itemDescription","setItemDescription","itemImage","setItemImage","size","onClick","type","value","label","onChange","e","target","oldBoard","newBoardItem","newBoard","items","push","db","collection","doc","id","set","catch","err","console","error","addBoardItem","name","description","image","HomePageHeader","tag","className","icon","Home","boards","boardName","setBoardName","boardAssignee","setBoardAssignee","loading","AddBoards","EditBoard","DeleteBoard","uuidv4","map","key","item","src","alt","NavbarPage","state","isOpen","toggleCollapse","setState","color","dark","expand","this","navbar","left","active","to","right","fab","nav","caret","href","Component","About","align","justify","Contact","App","setBoards","boardItem","setBoardItem","setLoading","boardRef","delete","updatedBoard","update","useEffect","onSnapshot","querySnapshot","docChanges","forEach","change","data","changedBoardIndex","findIndex","boardCopy","slice","filter","b","fluid","path","component","exact","render","props","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.0b51fba3.chunk.js","sourcesContent":["import * as firebase from 'firebase';\r\nimport 'firebase/database';\r\n\r\n  // Your web app's Firebase configuration\r\n  // For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAH9t3htqzEsAJSALdzOtfOv5TPkhorl3w\",\r\n    authDomain: \"tr-bucket.firebaseapp.com\",\r\n    databaseURL: \"https://tr-bucket.firebaseio.com\",\r\n    projectId: \"tr-bucket\",\r\n    storageBucket: \"tr-bucket.appspot.com\",\r\n    messagingSenderId: \"963780324144\",\r\n    appId: \"1:963780324144:web:d68239b3b860447939b6f5\",\r\n    measurementId: \"G-R59YTPV607\"\r\n};\r\n  // Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.analytics();\r\n\r\nexport default firebase.firestore();\r\n\r\n","import React from \"react\"\r\nimport db from \"../firebaseConfig\"\r\nimport { MDBBtn, MDBCardGroup, MDBCardBody, MDBInput } from \"mdbreact\"\r\n\r\n// REMAINDER:This file has; add Board Items function and Add Board Items Button (shows add items for regarding user clicks button or not)\r\nconst AddForm = ({ board }) => {\r\n  const [isShown, setIsShown] = React.useState(false)\r\n  const [itemName, setItemName] = React.useState(\"\")\r\n  const [itemDescription, setItemDescription] = React.useState(\"\")\r\n  const [itemImage, setItemImage] = React.useState(\"\")\r\n\r\n  function addBoardItem(oldBoard, newBoardItem) {\r\n    const newBoard = {\r\n      ...oldBoard,\r\n    }\r\n    newBoard.items.push(newBoardItem)\r\n    db.collection(\"boards\")\r\n      .doc(oldBoard.id)\r\n      .set(newBoard)\r\n      .catch((err) => {\r\n        console.error(err)\r\n      })\r\n  }\r\n\r\n  const handleShowClick = () => {\r\n    setIsShown(true)\r\n  }\r\n\r\n  const handleClick = () => {\r\n    addBoardItem(board, {\r\n      name: itemName,\r\n      description: itemDescription,\r\n      image: itemImage,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <MDBCardGroup>\r\n      <div>\r\n        {!isShown && (\r\n          <MDBBtn size=\"md\" onClick={handleShowClick}>\r\n            Add More Wishes\r\n          </MDBBtn>\r\n        )}\r\n\r\n        {isShown && (\r\n          <MDBCardBody>\r\n            <>\r\n              {\r\n                <>\r\n                  <MDBInput\r\n                    type=\"text\"\r\n                    value={itemName}\r\n                    label=\"Your travel wish\"\r\n                    onChange={(e) => setItemName(e.target.value)}\r\n                  />\r\n                  <MDBInput\r\n                    type=\"text\"\r\n                    value={itemDescription}\r\n                    label=\"Describe your wish\"\r\n                    onChange={(e) => setItemDescription(e.target.value)}\r\n                  />\r\n                  <MDBInput\r\n                    type=\"text\"\r\n                    value={itemImage}\r\n                    label=\"Add a photo\"\r\n                    onChange={(e) => setItemImage(e.target.value)}\r\n                  />\r\n                </>\r\n              }\r\n              <MDBBtn size=\"md\" onClick={handleClick}>\r\n                Save your wish\r\n              </MDBBtn>\r\n            </>\r\n          </MDBCardBody>\r\n        )}\r\n      </div>\r\n    </MDBCardGroup>\r\n  )\r\n}\r\n\r\nexport default AddForm\r\n","import React from \"react\"\r\nimport { MDBTypography, MDBIcon } from \"mdbreact\"\r\n\r\nconst HomePageHeader = () => {\r\n  return (\r\n    <>\r\n      <MDBTypography tag=\"h1\" className=\"text-center\">\r\n        <MDBIcon icon=\"map-marked\" className=\"cyan-text pr-3\" size=\"1x\" />\r\n        <br />\r\n        <strong className=\"cyan-text\">\r\n          <i>Your Travel Wishes...</i>{\" \"}\r\n        </strong>\r\n      </MDBTypography>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HomePageHeader\r\n","import React from \"react\"\r\nimport AddForm from \"../AddForm\"\r\nimport { v4 as uuidv4 } from \"uuid\"\r\nimport {\r\n  MDBBtn,\r\n  MDBCardGroup,\r\n  MDBCardBody,\r\n  MDBCard,\r\n  MDBCardTitle,\r\n  MDBCardText,\r\n  MDBCol,\r\n  MDBInput,\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBIcon,\r\n} from \"mdbreact\"\r\nimport HomePageHeader from \"../HomePageHeader\"\r\n\r\n//REMAINDER:This index has;\r\n//Homepage header\r\n//Create Board Form Section(display)\r\n//Board Items Section (display)\r\n\r\nconst Home = ({\r\n  boards,\r\n  boardName,\r\n  setBoardName,\r\n  boardAssignee,\r\n  setBoardAssignee,\r\n  itemName,\r\n  setItemName,\r\n  itemImage,\r\n  setItemImage,\r\n  itemDescription,\r\n  setItemDescription,\r\n  loading,\r\n  AddBoards,\r\n  EditBoard,\r\n  DeleteBoard,\r\n}) => {\r\n  return (\r\n    <MDBContainer>\r\n      <br />\r\n      <HomePageHeader />\r\n      <br />\r\n      {/* //Create Board Form Section(display) */}\r\n      <MDBCard>\r\n        <MDBCardBody>\r\n          <MDBInput\r\n            type=\"text\"\r\n            value={boardName}\r\n            onChange={(e) => setBoardName(e.target.value)}\r\n            label=\"New Travel Bucket\"\r\n          />\r\n          <MDBInput\r\n            type=\"text\"\r\n            value={itemName}\r\n            onChange={(e) => setItemName(e.target.value)}\r\n            label=\"Your Travel Wish\"\r\n          />\r\n          <MDBInput\r\n            type=\"text\"\r\n            value={boardAssignee}\r\n            onChange={(e) => setBoardAssignee(e.target.value)}\r\n            label=\"Set Assignee\"\r\n          />\r\n          <MDBInput\r\n            type=\"text\"\r\n            value={itemImage}\r\n            onChange={(e) => setItemImage(e.target.value)}\r\n            label=\"Visualize your wish\"\r\n          />\r\n\r\n          <MDBCardText\r\n            value={itemDescription}\r\n            onChange={(e) => setItemDescription(e.target.value)}\r\n            label=\"Describe your wish\"\r\n          />\r\n\r\n          <MDBBtn\r\n            onClick={() =>\r\n              AddBoards({\r\n                boardName: boardName,\r\n                id: uuidv4(),\r\n                itemName: itemName,\r\n                itemDescription: itemDescription,\r\n                boardAssignee: boardAssignee,\r\n                itemImage: itemImage,\r\n              })\r\n            }>\r\n            Add Your Travel Bucket\r\n          </MDBBtn>\r\n        </MDBCardBody>\r\n      </MDBCard>\r\n      <hr />\r\n      {loading ? <h1>Loading...</h1> : null}\r\n\r\n      {/* //Board Items Section including edit and delete buttons (display) */}\r\n      <MDBCardGroup>\r\n        {boards.map((board) => (\r\n          <MDBCol size=\"4\">\r\n            <MDBCard>\r\n              <MDBCardBody>\r\n                <div className=\"board\" key={board.id}>\r\n                  <MDBCardTitle tag=\"h3\">{board.boardName}</MDBCardTitle>\r\n                  <MDBCardText tag=\"h5\">{board.boardAssignee}</MDBCardText>\r\n                  {board.items &&\r\n                    board.items.map((item) => (\r\n                      <MDBCardText className=\"text-center\" key={item.name}>\r\n                        <MDBRow className=\"mb-4\">\r\n                          <img src={item.image} className=\"img-fluid\" alt=\"\" />\r\n                        </MDBRow>\r\n                        <MDBCardText className=\"text-left\">\r\n                          Wish Name: {item.name}\r\n                        </MDBCardText>\r\n                        <MDBCardText className=\"text-left\">\r\n                          Description: {item.description}\r\n                        </MDBCardText>\r\n                      </MDBCardText>\r\n                    ))}\r\n                  <AddForm board={board} />\r\n                  <div>\r\n                    <MDBBtn\r\n                      size=\"md\"\r\n                      onClick={() =>\r\n                        EditBoard({\r\n                          boardName,\r\n                          itemDescription,\r\n                          itemImage,\r\n                          itemName,\r\n                          id: board.id,\r\n                        })\r\n                      }>\r\n                      Edit\r\n                    </MDBBtn>\r\n                    <MDBBtn size=\"md\" onClick={() => DeleteBoard(board)}>\r\n                      Delete Your Bucket\r\n                    </MDBBtn>\r\n                    <hr />\r\n                    <br />\r\n                  </div>\r\n                </div>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n          </MDBCol>\r\n        ))}\r\n      </MDBCardGroup>\r\n    </MDBContainer>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  MDBNavbar,\r\n  MDBNavbarBrand,\r\n  MDBNavbarNav,\r\n  MDBNavItem,\r\n  MDBNavLink,\r\n  MDBNavbarToggler,\r\n  MDBCollapse,\r\n  MDBDropdown,\r\n  MDBDropdownToggle,\r\n  MDBDropdownMenu,\r\n  MDBDropdownItem,\r\n  MDBIcon,\r\n} from \"mdbreact\";\r\n\r\nclass NavbarPage extends Component {\r\n  state = {\r\n    isOpen: false,\r\n  };\r\n\r\n  toggleCollapse = () => {\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <MDBNavbar color=\"default-color\" dark expand=\"md\">\r\n        <MDBNavbarBrand>\r\n          <i className=\"white-text font-italic font-weight-bold brand\">\r\n            Travel Bucket\r\n          </i>\r\n        </MDBNavbarBrand>\r\n        <MDBNavbarToggler onClick={this.toggleCollapse} />\r\n        <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\r\n          <MDBNavbarNav left>\r\n            <MDBNavItem active>\r\n              <MDBNavLink to=\"/\" className=\"main-navs\">\r\n                Home\r\n              </MDBNavLink>\r\n            </MDBNavItem>\r\n            <MDBNavItem>\r\n              <MDBNavLink to=\"/about\" className=\"main-navs\">\r\n                About\r\n              </MDBNavLink>\r\n            </MDBNavItem>\r\n            <MDBNavItem>\r\n              <MDBNavLink to=\"/contact\" className=\"main-navs\">\r\n                Contact\r\n              </MDBNavLink>\r\n            </MDBNavItem>\r\n          </MDBNavbarNav>\r\n          <MDBNavbarNav right className=\"social-media-icons\">\r\n            <MDBNavItem>\r\n              <MDBNavLink className=\"waves-effect waves-light\" to=\"#!\">\r\n                <MDBIcon fab icon=\"twitter\" />\r\n              </MDBNavLink>\r\n            </MDBNavItem>\r\n            <MDBNavItem>\r\n              <MDBNavLink className=\"waves-effect waves-light\" to=\"#!\">\r\n                <MDBIcon fab icon=\"instagram\" />\r\n              </MDBNavLink>\r\n            </MDBNavItem>\r\n            <MDBNavItem>\r\n              <MDBNavLink className=\"waves-effect waves-light\" to=\"#!\">\r\n                <MDBIcon fab icon=\"facebook\" />\r\n              </MDBNavLink>\r\n            </MDBNavItem>\r\n            <MDBNavItem>\r\n              <MDBNavLink className=\"waves-effect waves-light\" to=\"#!\">\r\n                <MDBIcon fab icon=\"google-plus-g\" />\r\n              </MDBNavLink>\r\n            </MDBNavItem>\r\n            <MDBNavItem>\r\n              <MDBDropdown>\r\n                <MDBDropdownToggle nav caret>\r\n                  <MDBIcon icon=\"user\" />\r\n                </MDBDropdownToggle>\r\n                <MDBDropdownMenu className=\"dropdown-default\">\r\n                  <MDBDropdownItem href=\"#!\">Sign in</MDBDropdownItem>\r\n                  <MDBDropdownItem href=\"#!\">Sign up</MDBDropdownItem>\r\n                </MDBDropdownMenu>\r\n              </MDBDropdown>\r\n            </MDBNavItem>\r\n          </MDBNavbarNav>\r\n        </MDBCollapse>\r\n      </MDBNavbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavbarPage;\r\n","import React from \"react\"\r\nimport { MDBContainer } from \"mdbreact\"\r\n\r\nconst About = () => {\r\n  return (\r\n    <MDBContainer align=\"center\" justify=\"center\">\r\n      <br />\r\n      <h2 className=\"teal-text\">\r\n        <h2>Who we are ?</h2>\r\n        <br />\r\n        <h3>We are are Cihan & Şule</h3>\r\n        <br />\r\n        <h3>Passionate Front-End developers raised by Re:Coded bootcamp</h3>\r\n        <h3>\r\n          We are using latest technologies thanks to our lovely teachers Ammar,\r\n          Halit and Louis\r\n        </h3>\r\n      </h2>\r\n    </MDBContainer>\r\n  )\r\n}\r\nexport default About\r\n","import React from \"react\";\r\nimport { MDBContainer } from \"mdbreact\";\r\n\r\nconst Contact = () => {\r\n  return (\r\n    <MDBContainer>\r\n      <br />\r\n      <h2 className=\"teal-text\">\r\n        <i>Contact</i>\r\n      </h2>\r\n    </MDBContainer>\r\n  );\r\n};\r\nexport default Contact;\r\n","import React, { useState, useEffect } from \"react\"\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\r\nimport Home from \"./Components/Home\"\r\nimport NavbarPage from \"./Components/NavbarPage\"\r\nimport About from \"./Components/About\"\r\nimport Contact from \"./Components/Contact\"\r\nimport db from \"./firebaseConfig\"\r\nimport { MDBContainer } from \"mdbreact\"\r\n\r\nfunction App() {\r\n  const [boards, setBoards] = useState([])\r\n  const [boardItem, setBoardItem] = useState([])\r\n  const [boardName, setBoardName] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [itemName, setItemName] = useState(\"\")\r\n  const [itemDescription, setItemDescription] = useState(\"\")\r\n  const [itemImage, setItemImage] = useState(\"\")\r\n  const [boardAssignee, setBoardAssignee] = useState([])\r\n  const boardRef = db.collection(\"boards\")\r\n\r\n  // GET BOARDS\r\n  useEffect(() => {\r\n    setLoading(true)\r\n    boardRef.onSnapshot((querySnapshot) => {\r\n      querySnapshot.docChanges().forEach(function (change) {\r\n        if (change.type === \"added\") {\r\n          setBoards((boards) => [...boards, change.doc.data()])\r\n        }\r\n        if (change.type === \"modified\") {\r\n          setBoards((boards) => {\r\n            const changedBoardIndex = boards.findIndex(\r\n              (board) => board.id === change.doc.id\r\n            )\r\n            const boardCopy = boards.slice()\r\n            boardCopy[changedBoardIndex] = change.doc.data()\r\n            return boardCopy\r\n          })\r\n        }\r\n        if (change.type === \"removed\") {\r\n          setBoards((boards) =>\r\n            boards.filter((b) => b.id === change.doc.data().id)\r\n          )\r\n        }\r\n      })\r\n      setLoading(false)\r\n    })\r\n  }, [])\r\n\r\n  // ADD BOARD\r\n  function AddBoards(newBoard) {\r\n    boardRef\r\n      .doc(newBoard.id)\r\n      .set({\r\n        id: newBoard.id,\r\n        boardName: newBoard.boardName,\r\n        boardAssignee: newBoard.boardAssignee,\r\n        items: [\r\n          {\r\n            name: newBoard.itemName,\r\n            description: newBoard.itemDescription,\r\n            image: newBoard.itemImage,\r\n          },\r\n        ],\r\n      })\r\n      .catch((err) => {\r\n        console.error(err)\r\n      })\r\n  }\r\n\r\n  // DELETE BOARD\r\n  function DeleteBoard(board) {\r\n    boardRef\r\n      .doc(board.id)\r\n      .delete()\r\n      .catch((err) => {\r\n        console.error(err)\r\n      })\r\n  }\r\n\r\n  // EDIT BOARD\r\n  function EditBoard(updatedBoard) {\r\n    setLoading()\r\n    boardRef\r\n      .doc(updatedBoard.id)\r\n      .update(updatedBoard)\r\n      .catch((err) => {\r\n        console.error(err)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <MDBContainer fluid>\r\n      <Router>\r\n        <Route path=\"/\" component={NavbarPage} />\r\n        <Route\r\n          exact\r\n          path=\"/\"\r\n          render={(props) => (\r\n            <Home\r\n              boards={boards}\r\n              boardItem={boardItem}\r\n              setBoardItem={setBoardItem}\r\n              boardName={boardName}\r\n              setBoardName={setBoardName}\r\n              boardAssignee={boardAssignee}\r\n              setBoardAssignee={setBoardAssignee}\r\n              itemName={itemName}\r\n              setItemName={setItemName}\r\n              itemImage={itemImage}\r\n              setItemImage={setItemImage}\r\n              itemDescription={itemDescription}\r\n              setItemDescription={setItemDescription}\r\n              loading={loading}\r\n              AddBoards={AddBoards}\r\n              EditBoard={EditBoard}\r\n              DeleteBoard={DeleteBoard}\r\n            />\r\n          )}\r\n        />\r\n        <Route path=\"/about\" component={About} />\r\n        <Route path=\"/contact\" component={Contact} />\r\n      </Router>\r\n    </MDBContainer>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport \"./index.css\"\r\nimport App from \"./App\"\r\nimport * as serviceWorker from \"./serviceWorker\"\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\"\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\"\r\nimport \"mdbreact/dist/css/mdb.css\"\r\n\r\nReactDOM.render(\r\n  <>\r\n    <App />\r\n  </>,\r\n  document.getElementById(\"root\")\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}